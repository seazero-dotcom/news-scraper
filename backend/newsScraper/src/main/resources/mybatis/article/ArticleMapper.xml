<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.doubledowninteractive.news.article.repository.ArticleMapper">
    <resultMap id="ArticleMap" type="com.doubledowninteractive.news.article.domain.Article">
        <id property="id" column="id"/>
        <result property="sourceId" column="source_id"/>
        <result property="keywordId" column="keyword_id"/>
        <result property="url" column="url"/>
        <result property="urlHash" column="url_hash"/>
        <result property="title" column="title"/>
        <result property="summary" column="summary"/>
        <result property="imageUrl" column="image_url"/>
        <result property="publishedAt" column="published_at"/>
        <result property="fetchedAt" column="fetched_at"/>
        <result property="lang" column="lang"/>
    </resultMap>

    <insert id="upsert">
        INSERT INTO articles
        (source_id, keyword_id, url, url_hash, title, summary, image_url, published_at, fetched_at, lang)
        VALUES
            (#{sourceId}, #{keywordId}, #{url}, #{urlHash}, #{title}, #{summary}, #{imageUrl}, #{publishedAt}, #{fetchedAt}, #{lang})
            ON DUPLICATE KEY UPDATE
                                 title        = VALUES(title),
                                 summary      = VALUES(summary),
                                 image_url    = VALUES(image_url),
                                 lang         = VALUES(lang),
                                 published_at = VALUES(published_at),
                                 keyword_id   = VALUES(keyword_id),
                                 fetched_at   = VALUES(fetched_at)
    </insert>


    <insert id="insertIgnore">
        INSERT INTO articles
        (source_id, keyword_id, url, url_hash, title, summary, image_url, published_at, fetched_at, lang)
        VALUES
        (#{sourceId}, #{keywordId}, #{url}, #{urlHash}, #{title}, #{summary}, #{imageUrl}, #{publishedAt}, #{fetchedAt}, #{lang})
        ON DUPLICATE KEY UPDATE
        title        = VALUES(title),
        summary      = VALUES(summary),
        image_url    = VALUES(image_url),   <!-- ✅ 컬럼명 그대로 -->
        lang         = VALUES(lang),
        published_at = VALUES(published_at),
        keyword_id   = VALUES(keyword_id),
        fetched_at   = VALUES(fetched_at)
    </insert>



    <select id="findById" resultMap="ArticleMap">
        SELECT * FROM articles WHERE id = #{id}
    </select>

    <!-- backend/src/main/resources/mybatis/article/ArticleMapper.xml -->
    <select id="findPage" resultType="com.doubledowninteractive.news.article.dto.ArticleListItemDto">
        SELECT
        a.id,
        a.source_id   AS sourceId,
        s.code        AS sourceCode,
        s.name        AS sourceName,
        a.keyword_id  AS keywordId,
        k.word        AS keywordWord,           <!-- ✅ -->
        a.title,
        a.url,
        a.image_url   AS imageUrl,
        a.lang,
        a.published_at AS publishedAt,
        a.fetched_at   AS fetchedAt            <!-- ✅ -->
        FROM articles a
        LEFT JOIN sources  s ON s.id = a.source_id
        LEFT JOIN keywords k ON k.id = a.keyword_id
        <where>
            <if test="q != null and q != ''">
                (a.title LIKE CONCAT('%', #{q}, '%') OR a.url LIKE CONCAT('%', #{q}, '%'))
            </if>
            <if test="sourceId != null"> AND a.source_id = #{sourceId} </if>
            <if test="from != null"> AND a.published_at &gt;= #{from} </if>
            <if test="to != null"> AND a.published_at &lt;= #{to} </if>
        </where>
        ORDER BY COALESCE(a.published_at, a.fetched_at) DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="countBySourceId" parameterType="long" resultType="int">
        SELECT COUNT(*) FROM articles WHERE source_id = #{sourceId}
    </select>

    <delete id="deleteBySourceId" parameterType="long">
        DELETE FROM articles WHERE source_id = #{sourceId}
    </delete>

    <!-- ArticleMapper.xml -->
    <select id="count" resultType="long">
        SELECT COUNT(*) FROM articles
        <where>
            <if test="q != null and q != ''">
                AND (title LIKE CONCAT('%', #{q}, '%') OR url LIKE CONCAT('%', #{q}, '%'))
            </if>
            <if test="sourceId != null"> AND source_id = #{sourceId} </if>
            <if test="keywordId != null"> AND keyword_id = #{keywordId} </if>
            <if test="from != null"> AND DATE(COALESCE(published_at, fetched_at)) &gt;= #{from} </if>
            <if test="to != null">   AND DATE(COALESCE(published_at, fetched_at)) &lt;= #{to}   </if>
        </where>
    </select>

    <select id="find" resultMap="ArticleMap">
        SELECT * FROM articles
        <where>
            <if test="q != null and q != ''">
                AND (title LIKE CONCAT('%', #{q}, '%') OR url LIKE CONCAT('%', #{q}, '%'))
            </if>
            <if test="sourceId != null"> AND source_id = #{sourceId} </if>
            <if test="keywordId != null"> AND keyword_id = #{keywordId} </if>
            <if test="from != null"> AND DATE(COALESCE(published_at, fetched_at)) &gt;= #{from} </if>
            <if test="to != null">   AND DATE(COALESCE(published_at, fetched_at)) &lt;= #{to}   </if>
        </where>
        ORDER BY
        <choose>
            <when test="sort == 'oldest'"> COALESCE(published_at, fetched_at) ASC </when>
            <otherwise>                    COALESCE(published_at, fetched_at) DESC </otherwise>
        </choose>
        LIMIT #{size} OFFSET #{offset}
    </select>
    <!-- count는 기존 것 사용 -->

    <select id="findList" resultType="com.doubledowninteractive.news.article.dto.ArticleListItemDto">
        SELECT
        a.id,
        a.source_id   AS sourceId,
        s.code        AS sourceCode,
        s.name        AS sourceName,
        a.keyword_id  AS keywordId,
        k.word        AS keywordWord,
        a.title,
        a.url,
        a.lang,
        a.published_at AS publishedAt,
        a.fetched_at   AS fetchedAt
        FROM articles a
        LEFT JOIN sources  s ON s.id = a.source_id
        LEFT JOIN keywords k ON k.id = a.keyword_id
        <where>
            <if test="q != null and q != ''">
                AND (a.title LIKE CONCAT('%', #{q}, '%') OR a.url LIKE CONCAT('%', #{q}, '%'))
            </if>
            <if test="sourceId != null"> AND a.source_id = #{sourceId} </if>
            <if test="keywordId != null"> AND a.keyword_id = #{keywordId} </if>
            <if test="from != null"> AND DATE(COALESCE(a.published_at, a.fetched_at)) &gt;= #{from} </if>
            <if test="to != null">   AND DATE(COALESCE(a.published_at, a.fetched_at)) &lt;= #{to}   </if>
        </where>
        ORDER BY
        <choose>
            <when test="sort == 'oldest'"> COALESCE(a.published_at, a.fetched_at) ASC </when>
            <otherwise>                    COALESCE(a.published_at, a.fetched_at) DESC </otherwise>
        </choose>
        LIMIT #{size} OFFSET #{offset}
    </select>

</mapper>
